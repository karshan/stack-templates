{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
license:             BSD3
license-file:        LICENSE
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2017{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Lib, API, DB, Types
  build-depends:       base >= 4.7 && < 5
                     , acid-state
                     , aeson
                     , lens
                     , natural-transformation
                     , protolude
                     , safecopy
                     , servant-server
                     , wai
                     , warp
  default-language:    Haskell2010

executable {{name}}-exe
  hs-source-dirs:      app
  main-is:             Main.hs
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  build-depends:       base
                     , {{name}}
  default-language:    Haskell2010

test-suite {{name}}-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  build-depends:       base
                     , {{name}}
                     , directory
                     , hspec
                     , hspec-wai
                     , hspec-wai-json
                     , aeson
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  default-language:    Haskell2010

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE QuasiQuotes         #-}
{-# LANGUAGE ScopedTypeVariables #-}
module Main (main) where

import           API                 (app)
import           Control.Exception   (catch)
import           Data.String
import           DB                  (openDB)
import           System.Directory    (removeDirectoryRecursive)
import           System.IO.Error     (IOError)
import           Test.Hspec
import           Test.Hspec.Wai
import           Test.Hspec.Wai.JSON

main :: IO ()
main = hspec spec

setup = do
    removeDirectoryRecursive "test.db" `catch` (\(_ :: IOError) -> return ())
    app <$> openDB "test.db"

einstein :: String
einstein = "{\"userId\":1,\"userFirstName\":\"Albert\",\"userLastName\":\"Einstein\"}"

spec :: Spec
spec = beforeAll setup $ do
    describe "GET /users" $ do
        it "responds with 200" $ do
            get "/users" `shouldRespondWith` 200
        it "responds with [User]" $ do
            let users = "[]"
            get "/users" `shouldRespondWith` (fromString users)
    describe "POST /add" $ do
        it "responds with 200" $ do
            request "POST" "/add" [("Content-Type", "application/json")] (fromString einstein) `shouldRespondWith` 200
        it "added einstein" $ do
            get "/users" `shouldRespondWith` (fromString ("[" ++ einstein ++ "]"))
           
{-# START_FILE src/Lib.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Lib
    ( startApp
    ) where

import           API                      (app)
import           DB                       (DBHandle, openDB)
import           Network.Wai              (Application)
import           Network.Wai.Handler.Warp (run)
import           Protolude
import           Servant                  (Handler, serve)

startApp :: FilePath -> IO ()
startApp dbFilePath = do
    acid <- openDB dbFilePath
    run 8080 (app acid)

{-# START_FILE src/API.hs #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeOperators     #-}
module API
    ( app
    ) where

import           DB        (DBHandle, DBHandler, addUser, getUsers)
import           Protolude
import           Servant
import           Types     (User)

type API = "users" :> Get '[JSON] [User]
      :<|> "add"   :> ReqBody '[JSON] User :> Post '[JSON] ()

api :: Proxy API
api = Proxy

server :: DBHandle -> Server API
server acid = enter (runReaderTNat acid :: DBHandler :~> Handler) readerServerT

readerServerT :: ServerT API DBHandler
readerServerT = getUsers :<|> addUser

app :: DBHandle -> Application
app acid = serve api (server acid)

{-# START_FILE src/DB.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
module DB
    ( DBHandle
    , DBHandler
    , getUsers
    , addUser
    , openDB
    ) where

import           Control.Lens    (over, view)
import           Control.Lens.TH (makeLenses)
import           Data.Acid       (AcidState, Query, Update, makeAcidic,
                                  openLocalStateFrom, query, update)
import           Data.SafeCopy   (base, deriveSafeCopy)
import           Protolude
import           Servant         (Handler)

import           Types

data Database = Database { _users :: [User] } deriving (Eq, Show)
makeLenses ''Database

getUsersEvt :: Query Database [User]
getUsersEvt = view users <$> ask

addUserEvt :: User -> Update Database ()
addUserEvt user = modify (over users (user:))

$(deriveSafeCopy 0 'base ''User)
$(deriveSafeCopy 0 'base ''Database)
$(makeAcidic ''Database [ 'addUserEvt, 'getUsersEvt ])

query' a = liftIO . query a
update' a = liftIO . update a

type DBHandle = AcidState Database
type DBHandler = ReaderT DBHandle Handler

getUsers :: DBHandler [User]
getUsers = (`query'` GetUsersEvt) =<< ask

addUser :: User -> DBHandler ()
addUser user = (`update'` AddUserEvt user) =<< ask

openDB :: FilePath -> IO DBHandle
openDB fp = openLocalStateFrom fp (Database [])

{-# START_FILE src/Types.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE TemplateHaskell   #-}
module Types
    ( User (..)
    ) where

import           Data.Aeson.TH (defaultOptions, deriveJSON)
import           Protolude

data User = User
  { userId        :: Int
  , userFirstName :: Text
  , userLastName  :: Text
  } deriving (Eq, Show)

$(deriveJSON defaultOptions ''User)

{-# START_FILE app/Main.hs #-}
module Main where

import Lib

main :: IO ()
main = startApp "main.db"

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2017{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
